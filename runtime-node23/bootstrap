#!/bin/sh

echo "LAMBDA_TASK_ROOT is $LAMBDA_TASK_ROOT"

# cp -p /opt/node-v23.6.0-linux-x64/bin/node /opt/nodejs/node23
# cp -r /opt/nodejs/node_modules/ $LAMBDA_TASK_ROOT

# echo "PATH is $PATH"
export PATH=$PATH:/opt/nodejs/node_modules/:/opt/node_modules/
echo "PATH is $PATH"

# echo "NODE_PATH is $NODE_PATH"
export NODE_PATH=/opt/nodejs/node22/node_modules/:/opt/nodejs/node_modules:/opt/node_modules:$LAMBDA_RUNTIME_DIR/node_modules:/opt/
echo "NODE_PATH is $NODE_PATH"

# echo "LD_LIBRARY_PATH is $LD_LIBRARY_PATH"
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/nodejs/node_modules:/opt/node_modules
echo "LD_LIBRARY_PATH is $LD_LIBRARY_PATH"
# :$LAMBDA_TASK_ROOT/node_modules

echo `pwd`

cd $LAMBDA_TASK_ROOT
# echo `pwd`
echo `ls -al`
echo `ls -al /opt/`
echo `ls -al /opt/nodejs/`
echo `ls -al /opt/nodejs/node_modules/`

/opt/node-v23.6.0-linux-x64/bin/node /opt/runtime.js 

# set -euo pipefail

# # Initialization - load function handler
# source $LAMBDA_TASK_ROOT/"$(echo $_HANDLER | cut -d. -f1).sh"

# # Processing
# while true
# do
#   HEADERS="$(mktemp)"
#   # Get an event. The HTTP request will block until one is received
#   EVENT_DATA=$(curl -sS -LD "$HEADERS" "http://${AWS_LAMBDA_RUNTIME_API}/2018-06-01/runtime/invocation/next")

#   # Extract request ID by scraping response headers received above
#   REQUEST_ID=$(grep -Fi Lambda-Runtime-Aws-Request-Id "$HEADERS" | tr -d '[:space:]' | cut -d: -f2)

#   # Run the handler function from the script
#   RESPONSE=$($(echo "$_HANDLER" | cut -d. -f2) "$EVENT_DATA")

#   # Send the response
#   curl "http://${AWS_LAMBDA_RUNTIME_API}/2018-06-01/runtime/invocation/$REQUEST_ID/response"  -d "$RESPONSE"
# done